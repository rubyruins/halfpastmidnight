{"version":3,"file":"component---src-pages-tags-index-js-027f9f1b7115e2453536.js","mappings":"2LAaA,MAXmBA,IAAmB,IAAlB,SAAEC,GAAUD,EAC/B,MAAOE,EAAYC,GAAiBC,EAAAA,UAAe,GAInD,OAHAA,EAAAA,WAAgB,KACfD,GAAc,EAAK,GACjB,IACED,EAGED,EAFC,IAEO,ECsChB,MAnCeG,EAAAA,MAAW,KAsBzB,IAAIC,EA9BL,SAAwBC,GACvB,IAAIC,EAAYD,EAAKE,kBAAkBC,MACnCC,EAAcH,EAAUI,OAG5B,OADkBJ,EADKK,KAAKC,MAAMD,KAAKE,SAAWJ,GAGnD,CAwBqBK,EApBPC,EAAAA,EAAAA,gBAAe,eAqBxBC,GAAgBC,EAAAA,EAAAA,GAASb,EAAcc,YAAYC,aACnDC,EAAYhB,EAAcc,YAAYG,KAAO,KAAOjB,EAAcc,YAAYI,YAElF,OACCnB,EAAAA,cAACoB,EAAU,KACVpB,EAAAA,cAAA,OAAKqB,UAAU,4DACdrB,EAAAA,cAACsB,EAAAA,EAAW,CAACC,MAAOV,EAAeQ,UAAU,eAAeG,IAAKP,EAAWQ,MAAOR,KAExE,G,8JCnCf,MA6BaS,EAAOA,IACnB1B,EAAAA,cAAC2B,EAAAA,EAAG,CAACC,UAAU,aAgBhB,UA9CoBhC,IAAe,IAAd,KAAEM,GAAMN,EAE3B,OACDI,EAAAA,cAAC6B,EAAAA,EAAM,KACN7B,EAAAA,cAAA,OAAKqB,UAAU,8BACdrB,EAAAA,cAAA,OAAKqB,UAAU,OACdrB,EAAAA,cAAC8B,EAAAA,EAAM,MACP9B,EAAAA,cAAC+B,EAAAA,EAAO,KACP/B,EAAAA,cAAA,OAAKqB,UAAU,eACfrB,EAAAA,cAAA,UAAI,YACJA,EAAAA,cAAA,MAAIqB,UAAU,SAEbnB,EAAKE,kBAAkB4B,MAAMC,KAAIC,GACjClC,EAAAA,cAAA,MAAImC,IAAKD,EAAKE,IACbpC,EAAAA,cAAA,eACCA,EAAAA,cAACqC,EAAAA,KAAI,CAACC,GAAE,SAAWC,IAAUL,EAAKM,MAASN,EAAKM,IAAI,KAAGN,EAAKO,WAAW,WAO3EzC,EAAAA,cAAC0C,EAAAA,EAAO,QAGF,C","sources":["webpack://halfpastmidnight/./src/components/top/ClientOnly.js","webpack://halfpastmidnight/./src/components/top/Header.js","webpack://halfpastmidnight/./src/pages/tags/index.js"],"sourcesContent":["import * as React from 'react';\n\nconst ClientOnly = ({ children }) => {\n\tconst [hasMounted, setHasMounted] = React.useState(false);\n\tReact.useEffect(() => {\n\t\tsetHasMounted(true);\n\t}, []);\n\tif (!hasMounted) {\n\t\treturn null;\n\t}\n\treturn children;\n}\n\nexport default ClientOnly","import * as React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\nimport ClientOnly from './ClientOnly';\n\nfunction getRandomImage(data) {\n\tlet allImages = data.allMarkdownRemark.nodes\n\tlet totalImages = allImages.length;\n\tlet randomImageIndex = Math.floor(Math.random() * totalImages);\n\tlet randomImage = allImages[randomImageIndex];\n\treturn randomImage;\n}\n\nconst Header = React.memo(() => {\n\n\tconst data = useStaticQuery(graphql`\n\t\tquery {\n\t\t\tallMarkdownRemark (\n\t\t\t\tfilter: {fields: {collection: {eq: \"headers\"}}}\n\t\t\t\t) {\n\t\t\t\tnodes {\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\tname\n\t\t\t\t\t\tcontributor\n\t\t\t\t\t\tcover_image {\n\t\t\t\t\t\t\tchildImageSharp {\n\t\t\t\t\t\t\t\tgatsbyImageData\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`)\n\n\tlet selectedImage = getRandomImage(data);\n\tlet renderedImage = getImage(selectedImage.frontmatter.cover_image);\n\tlet imageInfo = selectedImage.frontmatter.name + \"\\n\" + selectedImage.frontmatter.contributor;\n\n\treturn (\n\t\t<ClientOnly>\n\t\t\t<div className='header-container col-xl-12 col-lg-12 col-md-12 col-sm-12'>\n\t\t\t\t<GatsbyImage image={renderedImage} className=\"header-image\" alt={imageInfo} title={imageInfo} />\n\t\t\t</div>\n\t\t</ClientOnly>\n\t)\n})\n\nexport default Header","import * as React from 'react';\nimport { Link, graphql } from 'gatsby';\nimport kebabCase from \"lodash/kebabCase\";\nimport Layout from '../../components/Layout';\nimport Content from '../../components/middle/Content';\nimport Sidebar from '../../components/right/SideBar';\nimport Header from '../../components/top/Header';\nimport Seo from \"../../components/top/Seo\";\n\nconst AllTagsPage = ({ data }) => {\n\t\n  return (\n\t<Layout>\n\t\t<div className=\"container layout-container\">\n\t\t\t<div className=\"row\">\n\t\t\t\t<Header/>\n\t\t\t\t<Content>\n\t\t\t\t\t<div className=\"review-card\">\n\t\t\t\t\t<h1>All Tags</h1>\n\t\t\t\t\t<hr className=\"my-4\"/>\n\t\t\t\t\t{\n\t\t\t\t\t\tdata.allMarkdownRemark.group.map(node => (\n\t\t\t\t\t\t<h4 key={node.id}>\n\t\t\t\t\t\t\t<article>\n\t\t\t\t\t\t\t\t<Link to={`/tags/${kebabCase(node.tag)}`}>{node.tag} ({node.totalCount})</Link>\n\t\t\t\t\t\t\t</article>\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t))\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</Content>\n\t\t\t\t<Sidebar/>\n\t\t\t</div>\n\t\t</div>\n\t</Layout>\n  )\n}\n\nexport const Head = () => (\n\t<Seo pageTitle=\"All Tags\" />\n)\n\nexport const query = graphql`\nquery {\n\tallMarkdownRemark (\n\t\tfilter: {fields: {collection: {eq: \"reviews\"}}}\n\t) {\n\t\tgroup(field: {frontmatter: {tags: SELECT}}) {\n\t\ttag: fieldValue\n\t\ttotalCount\n\t  \t}\n\t}\n}\n`\n\nexport default AllTagsPage"],"names":["_ref","children","hasMounted","setHasMounted","React","selectedImage","data","allImages","allMarkdownRemark","nodes","totalImages","length","Math","floor","random","getRandomImage","useStaticQuery","renderedImage","getImage","frontmatter","cover_image","imageInfo","name","contributor","ClientOnly","className","GatsbyImage","image","alt","title","Head","Seo","pageTitle","Layout","Header","Content","group","map","node","key","id","Link","to","kebabCase","tag","totalCount","Sidebar"],"sourceRoot":""}